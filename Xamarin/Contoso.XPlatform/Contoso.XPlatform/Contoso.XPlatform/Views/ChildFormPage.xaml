<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:behaviour="clr-namespace:Contoso.XPlatform.Behaviours"
             xmlns:converter="clr-namespace:Contoso.XPlatform.Converters"
             xmlns:utils="clr-namespace:Contoso.XPlatform.Utils"
             x:Class="Contoso.XPlatform.Views.ChildFormPage">
    <ContentPage.Resources>
        <ResourceDictionary>
            <converter:InverseBoolConverter x:Key="InverseBoolConverter"/>
            <converter:FirstValidationErrorConverter x:Key="FirstValidationErrorConverter"/>
            <converter:FontAwesomeConverter x:Key="FontAwesomeConverter"/>
            <converter:DebugConverter x:Key="DebugConverter"/>

            <DataTemplate x:Key="HiddenTemplate">
                <StackLayout IsVisible="false" HeightRequest="1">
                </StackLayout>
            </DataTemplate>

            <DataTemplate x:Key="TextTemplate">
                <StackLayout>
                    <Entry Text="{Binding Value}" 
                     Placeholder="{Binding Placeholder}">
                        <Entry.Behaviors>
                            <behaviour:EntryLineValidationBehavior IsValid="{Binding IsValid}" IsDirty="{Binding IsDirty}" />
                            <behaviour:EventToCommandBehavior 
                                EventName="TextChanged" 
                                Command="{Binding TextChangedCommand}" />
                        </Entry.Behaviors>
                    </Entry>
                    <Label 
                    Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                    Style="{StaticResource ErrorTextStyle}">
                        <Label.Behaviors>
                            <behaviour:ErrorLabelValidationBehavior  IsValid="{Binding IsValid}" IsDirty="{Binding IsDirty}" />
                        </Label.Behaviors>
                    </Label>
                </StackLayout>
            </DataTemplate>

            <DataTemplate x:Key="PasswordTemplate">
                <StackLayout>
                    <Entry Text="{Binding Value}" 
                           IsPassword="True"
                           Placeholder="{Binding Placeholder}">
                        <Entry.Behaviors>
                            <behaviour:EntryLineValidationBehavior IsValid="{Binding IsValid}" IsDirty="{Binding IsDirty}" />
                            <behaviour:EventToCommandBehavior 
                                EventName="TextChanged" 
                                Command="{Binding TextChangedCommand}" />
                        </Entry.Behaviors>
                    </Entry>
                    <Label 
                    Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                    Style="{StaticResource ErrorTextStyle}">
                        <Label.Behaviors>
                            <behaviour:ErrorLabelValidationBehavior  IsValid="{Binding IsValid}" IsDirty="{Binding IsDirty}" />
                        </Label.Behaviors>
                    </Label>
                </StackLayout>
            </DataTemplate>

            <DataTemplate x:Key="DateTemplate">
                <StackLayout>
                    <DatePicker Date="{Binding Value}">
                        <DatePicker.Behaviors>
                            <behaviour:EventToCommandBehavior 
                            EventName="DateSelected" 
                            Command="{Binding DateChangedCommand}" />
                        </DatePicker.Behaviors>
                    </DatePicker>
                    <Label 
                    Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                    IsVisible="{Binding IsValid, Converter={StaticResource InverseBoolConverter}}"
                    Style="{StaticResource ErrorTextStyle}"/>
                </StackLayout>
            </DataTemplate>
            <DataTemplate x:Key="CheckboxTemplate">
                <StackLayout>
                    <StackLayout Orientation="Horizontal">
                        <CheckBox IsChecked="{Binding Value}">
                            <CheckBox.Behaviors>
                                <behaviour:EventToCommandBehavior 
                                    EventName="CheckedChanged" 
                                    Command="{Binding CheckedChangedCommand}" />
                            </CheckBox.Behaviors>
                        </CheckBox>
                        <Label Text="{Binding CheckboxLabel}"
                           VerticalOptions="Center"/>
                    </StackLayout>
                    <Label Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                        IsVisible="{Binding IsValid, Converter={StaticResource InverseBoolConverter}}"
                        Style="{StaticResource ErrorTextStyle}"/>
                </StackLayout>
            </DataTemplate>
            <DataTemplate x:Key="PickerTemplate">
                <StackLayout>
                    <Picker x:Name="pickerDemo" 
                            SelectedItem="{Binding Value}"
                            Title="{Binding Title}"
                            ItemsSource="{Binding Items}">
                        <Picker.Behaviors>
                            <behaviour:EventToCommandBehavior 
                                    EventName="SelectedIndexChanged" 
                                    Command="{Binding SelectedIndexChangedCommand}" />
                        </Picker.Behaviors>
                    </Picker>
                    <Label 
                    Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                    IsVisible="{Binding IsValid, Converter={StaticResource InverseBoolConverter}}"
                    Style="{StaticResource ErrorTextStyle}"/>
                </StackLayout>
            </DataTemplate>

            <DataTemplate x:Key="MultiSelectTemplate">
                <StackLayout>
                    <Grid>
                        <Entry Text="{Binding DisplayText}" Placeholder="{Binding Placeholder}">
                            <Entry.Behaviors>
                                <behaviour:EntryLineValidationBehavior IsValid="{Binding IsValid}" IsDirty="{Binding IsDirty}" />
                                <behaviour:EventToCommandBehavior 
                                EventName="TextChanged" 
                                Command="{Binding TextChangedCommand}" />
                            </Entry.Behaviors>
                        </Entry>
                        <BoxView></BoxView>
                        <Grid.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding OpenCommand}"/>
                        </Grid.GestureRecognizers>
                    </Grid>
                    <Label 
                    Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                    IsVisible="{Binding IsValid, Converter={StaticResource InverseBoolConverter}}"
                    Style="{StaticResource ErrorTextStyle}"/>
                </StackLayout>
            </DataTemplate>

            <DataTemplate x:Key="PopupFormGroupTemplate">
                <StackLayout>
                    <Grid>
                        <Entry Text="{Binding DisplayText}" Placeholder="{Binding Placeholder}">
                            <Entry.Behaviors>
                                <behaviour:EntryLineValidationBehavior IsValid="{Binding IsValid}" IsDirty="{Binding IsDirty}" />
                                <behaviour:EventToCommandBehavior 
                                EventName="TextChanged" 
                                Command="{Binding TextChangedCommand}" />
                            </Entry.Behaviors>
                        </Entry>
                        <BoxView></BoxView>
                        <Grid.GestureRecognizers>
                            <TapGestureRecognizer Command="{Binding OpenCommand}"/>
                        </Grid.GestureRecognizers>
                    </Grid>
                    <Label 
                    Text="{Binding Errors, Converter={StaticResource FirstValidationErrorConverter}}"
                    IsVisible="{Binding IsValid, Converter={StaticResource InverseBoolConverter}}"
                    Style="{StaticResource ErrorTextStyle}"/>
                </StackLayout>
            </DataTemplate>

            <utils:QuestionTemplateSelector x:Key="QuestionTemplateSelector"
                                        CheckboxTemplate="{StaticResource CheckboxTemplate}"
                                            MultiSelectTemplate="{StaticResource MultiSelectTemplate}"
                                            PopupFormGroupTemplate="{StaticResource PopupFormGroupTemplate}"
                                            HiddenTemplate="{StaticResource HiddenTemplate}"
                                        DateTemplate="{StaticResource DateTemplate}"
                                        PasswordTemplate="{StaticResource PasswordTemplate}"
                                        TextTemplate="{StaticResource TextTemplate}"
                                        PickerTemplate ="{StaticResource PickerTemplate}"/>

            <DataTemplate x:Key="SubmitButtonTemplate">
                <StackLayout HorizontalOptions="CenterAndExpand" x:Name="button" >
                    <Label
                        FontSize="15"
                        HorizontalOptions="Center"
                            TextColor="{DynamicResource TertiaryTextColor}"
                            VerticalOptions="End"
                        Text="{Binding Path=ButtonIcon, Converter={StaticResource FontAwesomeConverter}}" 
                        FontFamily="{StaticResource FontAwesomeSolid}"/>
                    <Label 
                        FontSize="10"
                            VerticalOptions="Start"
                        HorizontalOptions="Center"
                            TextColor="{DynamicResource TertiaryTextColor}"
                        Text="{Binding LongString}" />
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup Name="CommonStates">
                            <VisualState Name="Normal" />
                            <VisualState Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{DynamicResource SelectedCommandButtonBackgroundColor}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <!--<Grid.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorLevel=1, AncestorType={x:Type TypeName=vm:EditFormViewModel`1}}, Path=SubmitCommand}" />
                    </Grid.GestureRecognizers>-->
                    <!--<Grid.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding Source={RelativeSource AncestorLevel=1, AncestorType={utils:GenericType TypeName=vm:EditFormViewModel`1, ElementTypeName=models:StudentModel}}, Path=SubmitCommand}" />
                    </Grid.GestureRecognizers>-->
                    <!--<StackLayout.GestureRecognizers>
                            <TapGestureRecognizer Tapped="Button_Tapped" Command="{Binding Source={RelativeSource AncestorType={utils:GenericType TypeName=vm:EditFormViewModel`1, ElementTypeName=models:StudentModel}}, Path=SubmitCommand}" />
                        </StackLayout.GestureRecognizers>-->
                </StackLayout>
            </DataTemplate>

            <DataTemplate x:Key="NavigateButtonTemplate">
                <StackLayout HorizontalOptions="CenterAndExpand" x:Name="button">
                    <Label
                        HorizontalOptions="Center"
                        VerticalOptions="End"
                        FontSize="15"
                        TextColor="{DynamicResource TertiaryTextColor}"
                        Text="{Binding Path=ButtonIcon, Converter={StaticResource FontAwesomeConverter}}" 
                        FontFamily="{StaticResource FontAwesomeSolid}" />
                    <Label 
                        HorizontalOptions="Center"
                        VerticalOptions="Start"
                        FontSize="10"
                        Text="{Binding LongString}"
                        TextColor="{DynamicResource TertiaryTextColor}" />
                    <VisualStateManager.VisualStateGroups>
                        <VisualStateGroup Name="CommonStates">
                            <VisualState Name="Normal" />
                            <VisualState Name="Selected">
                                <VisualState.Setters>
                                    <Setter Property="BackgroundColor" Value="{DynamicResource SelectedCommandButtonBackgroundColor}" />
                                </VisualState.Setters>
                            </VisualState>
                        </VisualStateGroup>
                    </VisualStateManager.VisualStateGroups>
                    <StackLayout.GestureRecognizers>
                        <TapGestureRecognizer Command="{Binding NavigateCommand, Converter={StaticResource DebugConverter}}" />
                    </StackLayout.GestureRecognizers>
                </StackLayout>
            </DataTemplate>

            <utils:CommandButtonSelector x:Key="CommandButtonSelector"
                                        SubmitButtonTemplate="{StaticResource SubmitButtonTemplate}"
                                        NavigateButtonTemplate="{StaticResource NavigateButtonTemplate}" />
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.Content>
        <AbsoluteLayout HorizontalOptions="Fill"
                        VerticalOptions="Fill">
            <ContentView BackgroundColor="{DynamicResource PopupViewBackgroundColor}" AbsoluteLayout.LayoutBounds="0.00, 0.00, 1, 1" AbsoluteLayout.LayoutFlags="All">
                <StackLayout Style="{StaticResource ChildFormPopupViewStyle}">
                    <Grid Style="{StaticResource PopupHeaderStyle}">
                        <Label Style="{StaticResource PopupHeaderLabelStyle}" Text="{Binding FormSettings.Title}" />
                    </Grid>
                    <CollectionView ItemsSource="{Binding Properties}"
                                    Style="{StaticResource ChildFormPopupCollectionViewStyle}"
                            ItemTemplate="{StaticResource QuestionTemplateSelector}">
                    </CollectionView>
                    <BoxView Style="{StaticResource PopupFooterSeparatorStyle}"></BoxView>
                    <Grid Style="{StaticResource PopupFooterStyle}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Button Style="{StaticResource PopupAcceptButtonStyle}" Grid.Column="2" Command="{Binding SubmitCommand}"></Button>
                        <Button Style="{StaticResource PopupCancelButtonStyle}" Grid.Column="1" Command="{Binding CancelCommand}"></Button>
                    </Grid>
                </StackLayout>
            </ContentView>
        </AbsoluteLayout>
    </ContentPage.Content>
</ContentPage>