            CreateMap<InputViewModel<IEnumerable<#TYPE#>>, InputQuestionParameters<IEnumerable<#TYPE#>>>()
                .ConstructUsing((source, context) => new InputQuestionParameters<IEnumerable<#TYPE#>>
                {
                    QuestionData = context.Mapper.Map<InputDataParameters>(source)
                })
                .ReverseMap()
                .ConstructUsing((source, context) =>
                {
                    return context.Mapper.Map<InputViewModel<IEnumerable<#TYPE#>>>((InputDataParameters)source.QuestionData);
                });
            CreateMap<InputDataParameters, InputViewModel<IEnumerable<#TYPE#>>>()
				.ForMember(dest => dest.CurrentValue, opt => opt.Ignore())
				.ForMember(dest => dest.Id, opt => opt.Ignore())
				.ForMember(dest => dest.VariableName, opt => opt.Ignore())
				.ForMember(dest => dest.Errors, opt => opt.Ignore())
			.ReverseMap();

            CreateMap<InputViewModel<ICollection<#TYPE#>>, InputQuestionParameters<ICollection<#TYPE#>>>()
                .ConstructUsing((source, context) => new InputQuestionParameters<ICollection<#TYPE#>>
                {
                    QuestionData = context.Mapper.Map<InputDataParameters>(source)
                })
                .ReverseMap()
                .ConstructUsing((source, context) =>
                {
                    return context.Mapper.Map<InputViewModel<ICollection<#TYPE#>>>((InputDataParameters)source.QuestionData);
                });
            CreateMap<InputDataParameters, InputViewModel<ICollection<#TYPE#>>>()
				.ForMember(dest => dest.CurrentValue, opt => opt.Ignore())
				.ForMember(dest => dest.Id, opt => opt.Ignore())
				.ForMember(dest => dest.VariableName, opt => opt.Ignore())
				.ForMember(dest => dest.Errors, opt => opt.Ignore())
			.ReverseMap();

			CreateMap<InputViewModel<IList<#TYPE#>>, InputQuestionParameters<IList<#TYPE#>>>()
                .ConstructUsing((source, context) => new InputQuestionParameters<IList<#TYPE#>>
                {
                    QuestionData = context.Mapper.Map<InputDataParameters>(source)
                })
                .ReverseMap()
                .ConstructUsing((source, context) =>
                {
                    return context.Mapper.Map<InputViewModel<IList<#TYPE#>>>((InputDataParameters)source.QuestionData);
                });
            CreateMap<InputDataParameters, InputViewModel<IList<#TYPE#>>>()
				.ForMember(dest => dest.CurrentValue, opt => opt.Ignore())
				.ForMember(dest => dest.Id, opt => opt.Ignore())
				.ForMember(dest => dest.VariableName, opt => opt.Ignore())
				.ForMember(dest => dest.Errors, opt => opt.Ignore())
			.ReverseMap();

            CreateMap<InputViewModel<#TYPE#>, InputQuestionParameters<#TYPE#>>()
                .ConstructUsing((source, context) => new InputQuestionParameters<#TYPE#>
                {
                    QuestionData = context.Mapper.Map<InputDataParameters>(source)
                })
                .ReverseMap()
                .ConstructUsing((source, context) =>
                {
                    return context.Mapper.Map<InputViewModel<#TYPE#>>((InputDataParameters)source.QuestionData);
                });
            CreateMap<InputDataParameters, InputViewModel<#TYPE#>>()
				.ForMember(dest => dest.CurrentValue, opt => opt.Ignore())
				.ForMember(dest => dest.Id, opt => opt.Ignore())
				.ForMember(dest => dest.VariableName, opt => opt.Ignore())
				.ForMember(dest => dest.Errors, opt => opt.Ignore())
			.ReverseMap();